<?php

namespace App\Tests\Entity;
use App\Entity\Utilisateurs;

use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class UtilisateursTest extends KernelTestCase
{
    //Initialisation
    public function getEntity() : Utilisateurs {
		return (new Utilisateurs())
		->setEmail("test@test.com")
		->setRoles(array("ROLE_USER"))
		->setPassword("password")
		->setNom("nom")
		->setPrenom("prenom")
		->setCivilite("M")
		->setTelephone("010101010101")
		->setAdresse("adresse")
		->setCodePostal("75000")
		->setVille("ville")
		->setPays("pays")
		->setImage("image")
		->setCreatedAt(new \DateTimeImmutable());
	}

    public function assertHasErrors(Utilisateurs $utilisateur, int $numberErrors = 0) {
		self::bootKernel();
		$error = self::getContainer()->get('validator')->validate($utilisateur);
		$this->assertCount($numberErrors, $error);
	}


    //Tests

    //Entité valide
    public function testValidEntity() {
		$this->assertHasErrors($this->getEntity(), 0);
	}

    //Tests des entrées invalides
    public function testInvalidEmail() {
		$this->assertHasErrors($this->getEntity()->setEmail("test@test"), 1);
	}   

    //Tests des entrées vides
    public function testEmptyEmail() {
		$this->assertHasErrors($this->getEntity()->setEmail(""), 1);
	}   
    public function testEmptyPassword() {
		$this->assertHasErrors($this->getEntity()->setPassword(""), 1);
	}   
    public function testEmptyNom() {
		$this->assertHasErrors($this->getEntity()->setNom(""), 1);
	}   
    public function testEmptyPrenom() {
		$this->assertHasErrors($this->getEntity()->setPrenom(""), 1);
	}   

    //Tests des entrées trop volumineuses
    public function testInvalidLenghtEmail() {
		$this->assertHasErrors($this->getEntity()->setEmail("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz.com"), 1);
	}     
    public function testInvalidLenghtPassword() {
		$this->assertHasErrors($this->getEntity()->setPassword("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz"), 1);
	}   
    public function testInvalidLenghtNom() {
		$this->assertHasErrors($this->getEntity()->setNom("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz"), 1);
	}    
    public function testInvalidLenghtPrenom() {
		$this->assertHasErrors($this->getEntity()->setPrenom("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz"), 1);
	}    
    public function testInvalidLenghtCivilite() {
		$this->assertHasErrors($this->getEntity()->setCivilite("aaz"), 1);
	}   
    public function testInvalidLenghtTelephone() {
		$this->assertHasErrors($this->getEntity()->setTelephone("aaaaaaaaaaaaaaaaaaaaz"), 1);
	}
    public function testInvalidLenghtAdresse() {
		$this->assertHasErrors($this->getEntity()->setAdresse("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz"), 1);
	}
    public function testInvalidLenghtCodePostal() {
		$this->assertHasErrors($this->getEntity()->setCodePostal("aaaaaz"), 1);
	}
    public function testInvalidLenghtVille() {
		$this->assertHasErrors($this->getEntity()->setVille("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz"), 1);
	}
    public function testInvalidLenghtPays() {
		$this->assertHasErrors($this->getEntity()->setPays("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz"), 1);
	}
    public function testInvalidLenghtImage() {
		$this->assertHasErrors($this->getEntity()->setImage
        123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789


        123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789"), 1);
	}
}
